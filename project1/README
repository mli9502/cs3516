Author: Mengwen Li (mli2)

To compile the program, use command "make" and to clear up, use command "make clean".

The "MEClient.log", "MEClientOutput.txt" and "MEDatabase.txt" files are generated by running:
"./mli2_MEClient CCCWORK2 <MEClient.txt >MEClientOutput.txt" for the client side and
"./mli2_MEServer" for the server side.

The "MEClientOutput.txt" is the console output from the client program redirected to file.
The "MEDatabase.txt" is the complete database written by the server program.
The "MEClient.log" is the log file logged by client program.
The "MEClient.txt" is the official test data.

Server side:
To run the server, use command "./mli2_MEServer"
All the commands in server side work as instructed. The server program will output the number of TCP packets it sends to client every time "quit" command is received.
If "quit EOF" command is received, a file called "MEDatabase.txt" is generated containing all the entries in the person database.

Client side:
To run the client with user input from keyboard and output to the screen, use command "./mli2_MEClient <server machine such as "CCCWORK2">"
To run the client with input from file and output to another file, use command "./mli2_MEClient <server machine such as "CCCWORK2"> < <input file name> > <output file name>"
Client side handles the checking of syntax correctness of a command, any command that has incorrect syntax, incorrect authorization level or not one of the given commands will be rejected directly and will not be sending to the server. The command that is not one of the given commands will not be logged.
All the commands in the client side work as instructed. The client program will write the command it reads in and the responces it gets to a file called "MEClient.log"
The format of "MEClient.log" is as following:
Command issued: <The command user typed in>
Responsed: <The response user gets>

"Person" class:
The "Person" class is created to define the attributes and methods for a person. The header for this class is in "Person.h" and the functions are in "Person.cpp"

"PersonDb" class:
The "PersonDb" class is created to define the attribute (a vector of Person) and methods for the person database. The header for this class is in "PersonDb.h" and the functions
are in "PersonDb.cpp"

"helper.h" and "helper.cpp" contains helper functions used in the program.

The client program is in "mli2_MEClient.cpp" file and the server program is in "mli2_MEServer.cpp" file.

Responses that will occure for commands:
For the "login" command:
If the user tries to login again after a login without quit, the response will be "There's already a user logged in!"
If the user login command doesn't have correct number of arguments, the response will be "Invalid command foramt! login <username>"
If the user typed a name other than "FEMA" or "Query", the response will be "User name incorrect!"
If the user inputs the correct command, the response will be "Hello <name>!"

For the "add" command:
If the user hasn't logged in, the response will be "Need to login first!"
If the user is not "FEMA", the response will be "User can't use add"
If the user input the wrong number of arguments, the response will be "Invalid command format! add <id_number> <first_name> <last_name> <gender> <location>"
If the arguments are not in the instruction specified range, the response will be "Invalid input argument length!"
If the id number is not 9 digits, the response will be "Invalid id number digit!"
If the gender is not from "F" or "M", the response will be "Invalid gender! Should be F or M"
If the add command is correct, the response will be the same as the add command user inputted.

For the "update" command:
If the user hasn't logged in, the response will be "Need to login first!"
If the user is not "FEMA", the response will be "User can't use update"
If the user input the wrong number of arguments, the response will be "Invalid command format! update <id_number> <first_name> <last_name> <gender> <location>"
If the arguments are not in the instruction specified range, the response will be "Invalid input argument length!"
If the id number is not 9 digits, the response will be "Invalid id number digit!"
If the gender is not from "F" or "M", the response will be "Invalid gender! Should be F or M"
If the add command is correct and the id number is in the database, the record in the database will be updated and no response will be returned from server.
If the add command is correct but the id number is not in the database, the response will be "Can't find specified person!".

For the "remove" command:
If the user hasn't logged in, the response will be "Need to login first!"
If the user is not "FEMA", the response will be "User can't use remove"
If the user input the wrong number of arguments, the response will be "Invalid command format! remove <id_number>"
If the id number is not 9 digits, the response will be "Invalid id number digit!"
If the id number is not found in the database, the response will be "remove error: given ID number not found!"
If the remove command is correct and the id is in database, the response will be "<first name> <last name> is removed"

For the "find" command:
If the user hasn't logged in, the response will be "Need to login first!".
If the user input the wrong number of arguments, the response will be "Invalid command format! find <first_name> <last_name>".
If the names are out of range, the response will be "Invalid input argument length!".
If the names are not found in the database, the response will be "No person called <first name> <last name> is found!"
If the persons are found, the response will be all the records that have the same name as input.

For the "list" command:
If the user hasn't logged in, the response will be "Need to login first!".
If the user input the wrong number of arguments, the response will be: 
"Invalid command format! "
"list"
"list <start>"
"list <start> <finish>"
If the length of start and finish is not 1, the response will be "argument length is not 1!"
If finish is less than start, the response will be "finish less then start"
If no records are found in range, the response will be "No entities satisfy requirements"
For the "list" command, if the database is empty, the resoponse will be "Person Database is empty!"
If some records are found, the response will be all the reconds found.
"list" command will list all records including UNK records.
The other two list commands will not include UNK records.

For the "locate" command:
If the user hasn't logged in, the response will be "Need to login first!".
If the user input the wrong number of arguments, the response will be "Invalid command format! locate <location>".
If the location is out of range, the response will be "Invalid input argument length!".
If the records are not found in the database, the response will be "No match locaton found!"
If records are found, the response will be all the records that have the same location as input.

For the "quit" command:
If the user hasn't logged in, the response will be "Need to login first!".
If the user input the wrong number of arguments, the response will be "Invalid command format! quit <EOF>".
If the user input "EOF" after quit, the response will be:
	"The TCP connection for client <clntName> will be closed."
	"The total number of commends <clntName> sent is <The number of commands server received>"
	"Total number of packets server sent is <The total number of packets server sent>"
	"client script count is <The number of client scripts>" 
	The server will also generate a file called "MEDatabase.txt" containing the entire database and print out "The total number of packets sent to client is <The number of packets sent to current client>".

If the user only input quit, the response will be:
	"The TCP connection for client <clntName> will be closed."
	"The total number of commends <clntName> sent is <The number of commands server received>"
	The server will also print out "The total number of packets sent to client is <The number of packets sent to current client>"
